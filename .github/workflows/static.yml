# Simple workflow for deploying static content to GitHub Pages
name: Deploy MonoGame web project to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we are just deploying
  deploy-to-github-pages:
    environment:
      name: github-pages
      url: $
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Publish .NET Core Project
        continue-on-error: true
        run: dotnet publish WebGameTest.csproj -c Release -o release --nologo
      - name: Print directories
        run: |
          ls -l /home/runner/.nuget/packages/nkast.xna.framework.content.pipeline.builder/3.14.9001
          ls -l /home/runner/.nuget/packages/nkast.xna.framework.content.pipeline.builder/3.14.9001/build
          ls -l /home/runner/.nuget/packages/nkast.xna.framework.content.pipeline.builder/3.14.9001/tools
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload wwwroot from publish action
          path: 'release/wwwroot'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
